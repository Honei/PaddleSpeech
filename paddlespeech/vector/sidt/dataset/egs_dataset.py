#!/usr/bin/env python
# -*- coding: utf-8 -*-
########################################################################
#
# Copyright     2019 ~ 2020    Zeng Xingui(zengxingui@baidu.com)
#
########################################################################

"""
Load nnet3 training egs which generated by kaldi
"""

import random
import numpy as np
import kaldi_python_io as k_io

import sidt.utils.utils as utils
from sidt import _logger as log


def create_kaldi_egs_dataset(cls):
    """Kaldi Egs dataset factory

    Args:
        cls: base cls of dataset, paddle dataset or pytorch dataset

    Returns:
        datset: an dataset instance of input class
    """
    class KaldiEgsDataset(cls):
        """
        Dataset used to load kaldi nnet3 egs files.
        """
        def __init__(self, egs_list_file, egs_idx, transforms=None):
            self.scp_reader = None
            self.subset_idx = egs_idx - 1
            self.transforms = transforms
            if not utils.is_exist(egs_list_file):
                return

            self.egs_files = []
            with open(egs_list_file, 'r') as in_fh:
                for line in in_fh:
                    if line.strip():
                        self.egs_files.append(line.strip())

            self.next_subset()

        def next_subset(self, target_index=None, delta_index=None):
            """
            Use next specific subset

            Args:
                target_index: target egs index
                delta_index: incremental value of egs index
            """
            if self.egs_files:
                if target_index:
                    self.subset_idx = target_index
                else:
                    delta_index = delta_index if delta_index else 1
                    self.subset_idx += delta_index
                log.info("egs dataset subset index: %d" % (self.subset_idx))
                egs_file = self.egs_files[self.subset_idx % len(self.egs_files)]
                if utils.is_exist(egs_file):
                    self.scp_reader = k_io.Nnet3EgsScriptReader(egs_file)
                else:
                    log.warning("No such file or directory: %s" % (egs_file))

        def __getitem__(self, index):
            if self.scp_reader is None:
                return {}
            index %= len(self)
            in_dict, out_dict = self.scp_reader[index]
            x = np.array(in_dict['matrix'])
            x = np.transpose(x)
            y = np.array(out_dict['matrix'][0][0][0], dtype=np.int).reshape((1,))
            if self.transforms is not None:
                idx = random.randint(0, len(self.transforms) - 1)
                x = self.transforms[idx](x)
            return x, y

        def __len__(self):
            return len(self.scp_reader)

        def __iter__(self):
            self._start = 0
            return self

        def __next__(self):
            if self._start < len(self):
                ret = self[self._start]
                self._start += 1
                return ret
            else:
                raise StopIteration

    return KaldiEgsDataset


if __name__ == "__main__":
    import sys
    egs_list_file = sys.argv[1]

    def test_dataset(dataset):
        """
        Test function.

        Args:
            dataset: Paddle/pytorch dataset
        """
        log.info("Dataset length = %d, Lable[0] = %d" % (len(egs_dataset),
                                                         egs_dataset[0][1]))

        x_array = []
        y_array = []
        for idx, data in enumerate(dataset):
            x_array.append(data[0])
            y_array.append(data[1])
            if idx % 100 == 0:
                log.info("Load %d items." % (idx))
            if idx >= 400:
                break

    try:
        import paddle
        paddle.disable_static()
        place = paddle.CPUPlace()
        log.info("Test paddlepaddle dataset")
        egs_dataset = create_kaldi_egs_dataset(paddle.io.Dataset)(egs_list_file, 0)
        egs_loader = paddle.io.DataLoader(dataset=egs_dataset, batch_size=1,
                                          return_list=True, shuffle=False,
                                          places=place, num_workers=1)
        test_dataset(egs_loader)
    except:
        log.warning("Paddle is not available")

    try:
        import torch
        log.info("Test torch dataset")
        egs_dataset = create_kaldi_egs_dataset(torch.utils.data.Dataset)(egs_list_file, 0)
        egs_loader = torch.utils.data.DataLoader(dataset=egs_dataset, batch_size=1,
                                                 shuffle=False, num_workers=1)
        test_dataset(egs_loader)
    except:
        log.warning("torch is not available")
